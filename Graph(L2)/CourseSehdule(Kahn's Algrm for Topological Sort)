import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
// import java.util.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Queue;
//Kahn's Algrm - Topological Sort Using BFS
public class Main {

	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		String[] st = br.readLine().split(" ");
		int n = Integer.parseInt(st[0]);
		int m = Integer.parseInt(st[1]);

		int[][] prerequisites = new int[m][2];
		for (int i = 0; i < m; i++) {
			st = br.readLine().split(" ");
			prerequisites[i][0] = Integer.parseInt(st[0]);
			prerequisites[i][1] = Integer.parseInt(st[1]);
		}
        //VIP****
		ArrayList<ArrayList<Integer>> graph = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			graph.add(new ArrayList<>());
		}

		for (int i = 0; i < prerequisites.length; i++) {
			int u = prerequisites[i][0];
			int v = prerequisites[i][1];

			graph.get(v).add(u);
		}

		int[] ans = findOrder(n, graph);

		for (int val : ans) {
			System.out.print(val + " ");
		}
	}

	public static int[] findOrder(int numCourses, ArrayList<ArrayList<Integer>> adj) {
    
	  int[]ans= new int[numCourses];

	  int[]indegree= new int[numCourses];
      
	  //assign indegree to all nbrs of vertices
	  for(int i=0;i<adj.size();i++){
		  for(int nbr:adj.get(i)){
			  indegree[nbr]++;
		  }
	  }

	//   can use Queue<Integer>q = new ArrayDeque<>();

	LinkedList<Integer>q= new LinkedList<>();
	  //add vtx with indegree 0 in q
	  for(int i=0;i<indegree.length;i++){
		  if(indegree[i]==0)
		   q.addLast(i);
	  }

      //To keep track of total elements removed and also added in 'ans' array
	  int count=0;
      
	  while(q.size()!=0){
		  int top=q.removeFirst();
		  ans[count]=top;
		  count++;

		  for(int nbr:adj.get(top)){
			  indegree[nbr]--;
			  if(indegree[nbr]==0)
			   q.addLast(nbr);
		  }
	  }

	  if(count==numCourses)
	   return ans;
	 
	 return new int[]{-1};

	}
}