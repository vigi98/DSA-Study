TC-> O(m*n)
SC-> O(m*n) size of queue
class Solution {
    
    private class Pair{
        int x,y;
        Pair(int x,int y){
            this.x=x;
            this.y=y;
        }
    }
    
    public int[][] updateMatrix(int[][] mat) {
        
        Queue<Pair>q= new ArrayDeque<>();
        
        int n=mat.length,m=mat[0].length;
        //convert all +ve nos (except 0) to -1[meaing un-vis]
        //Add (i,j) of 0's in queue
        for(int i=0;i<mat.length;i++)
            for(int j=0;j<mat[0].length;j++){
                if(mat[i][j]==1)//1 is the only +ve no in matrix
                    mat[i][j]=-1;
                else
                    q.add(new Pair(i,j));
            }
        
        //r,a-> remove, addAll un-vis Nodes(value of un-vis nodes will be converted)
        while(q.size()!=0){
            Pair top=q.remove();
            int x=top.x;
            int y=top.y;
            
            //left
            if(y!=0 && mat[x][y-1]==-1){
                mat[x][y-1]=mat[x][y]+1;
                q.add(new Pair(x,y-1));
            }
            
            //right
            if(y!=m-1 && mat[x][y+1]==-1){
                mat[x][y+1]=mat[x][y]+1;
                q.add(new Pair(x,y+1));
            }
            
            //top
            if(x!=0 && mat[x-1][y]==-1){
                mat[x-1][y]=mat[x][y]+1;
                q.add(new Pair(x-1,y));
            }
            
            //bottom
            if(x!=n-1 && mat[x+1][y]==-1){
                mat[x+1][y]=mat[x][y]+1;
                q.add(new Pair(x+1,y));
            }
        }
        
        return mat;            
    }

  //Method-2: Using Directions Array(Good method check)
    int [][]dirs= {{1,0},
                  {-1,0},
                  {0,1},
                  {0,-1}};
    
    public int[][] updateMatrix2(int[][] mat) {
        
        Queue<Pair>q= new ArrayDeque<>();
        
        int n=mat.length,m=mat[0].length;
        //convert all +ve nos (except 0) to -1[meaing un-vis]
        //Add (i,j) of 0's in queue
        for(int i=0;i<mat.length;i++)
            for(int j=0;j<mat[0].length;j++){
                if(mat[i][j]==1)//1 is the only +ve no in matrix
                    mat[i][j]=-1;
                else
                    q.add(new Pair(i,j));
            }
        
        //r,a-> remove, addAll un-vis Nodes(value of un-vis nodes will be converted)
        while(q.size()!=0){
            Pair top=q.remove();
            int x=top.x;
            int y=top.y;
            
             for(int i=0;i<dirs.length;i++){
                int rdash=x+dirs[i][0];
                int cdash=y+dirs[i][1];
                 
                if(rdash>=0 && cdash>=0 && rdash<n && cdash<m && mat[rdash][cdash]==-1){
                   mat[rdash][cdash]=mat[x][y]+1;
                   q.add(new Pair(rdash,cdash));
                }
            }
           
        }
        
        return mat;
        
                    
    }
    
    
}