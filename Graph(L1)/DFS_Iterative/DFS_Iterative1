import java.io.*;
import java.util.*;

public class Main {
   static class Edge {
      int src;
      int nbr;

      Edge(int src, int nbr) {
         this.src = src;
         this.nbr = nbr;
      }
   }

   public static void main(String[] args) throws Exception {
      BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

      int vtces = Integer.parseInt(br.readLine());
      ArrayList<Edge>[] graph = new ArrayList[vtces];
      for (int i = 0; i < vtces; i++) {
         graph[i] = new ArrayList<>();
      }

      int edges = Integer.parseInt(br.readLine());
      for (int i = 0; i < edges; i++) {
         String[] parts = br.readLine().split(" ");
         int v1 = Integer.parseInt(parts[0]);
         int v2 = Integer.parseInt(parts[1]);
         graph[v1].add(new Edge(v1, v2));
         graph[v2].add(new Edge(v2, v1));
      }

      int src = Integer.parseInt(br.readLine());

      dfs_itr(graph,src); 
   }

   static void dfs_itr(ArrayList<Edge>[] graph,int src){

      Stack<Pair>st= new Stack<>();
      st.push(new Pair(src,src+""));

      boolean[]vis= new boolean[graph.length];
      
      while(st.size()!=0){
          
         Pair top=st.peek();
         
         if(!vis[top.vtx]){
           vis[top.vtx]=true;
           System.out.println(top.vtx+"@"+top.path);
         }
         
         int count=0;
         ArrayList<Edge> edg=graph[top.vtx];
        
         //put first un-visited edge in stack and break.
         // If no unvisted nbr is there then "pop" top of stack.
         for(int i=edg.size()-1;i>=0;i--){
            Edge e=edg.get(i);
            if(!vis[e.nbr]){
               count=1;
               st.push(new Pair(e.nbr,top.path+e.nbr));
               break;
            }
         }
        
         if(count==0)
          st.pop();
      }

   }

   static class Pair{
      int vtx;
      String path;
      Pair(int v,String p){
         vtx=v;
         path=p;
      }
   }
}