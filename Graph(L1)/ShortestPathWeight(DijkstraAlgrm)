import java.io.*;
import java.util.*;

public class Main {
   static class Edge {
      int src;
      int nbr;
      int wt;

      Edge(int src, int nbr, int wt) {
         this.src = src;
         this.nbr = nbr;
         this.wt = wt;
      }
   }

   public static void main(String[] args) throws Exception {
      BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

      int vtces = Integer.parseInt(br.readLine());
      ArrayList<Edge>[] graph = new ArrayList[vtces];
      for (int i = 0; i < vtces; i++) {
         graph[i] = new ArrayList<>();
      }

      int edges = Integer.parseInt(br.readLine());
      for (int i = 0; i < edges; i++) {
         String[] parts = br.readLine().split(" ");
         int v1 = Integer.parseInt(parts[0]);
         int v2 = Integer.parseInt(parts[1]);
         int wt = Integer.parseInt(parts[2]);
         graph[v1].add(new Edge(v1, v2, wt));
         graph[v2].add(new Edge(v2, v1, wt));
      }

      int src = Integer.parseInt(br.readLine());
      dijkstra(src,graph);
      
   }

   static void dijkstra(int src,ArrayList<Edge>[] graph){
   
     boolean[]vis=new boolean[graph.length];
     //Min_PQueue
     PriorityQueue<Pair>pq= new PriorityQueue<>();
     pq.add(new Pair(src,src+"",0));
     //rc*m(w)a*
     while(pq.size()!=0){
       Pair top=pq.peek();
       pq.remove();

       if(vis[top.v]) continue;

       vis[top.v]=true;
       System.out.println(top.v+" via "+top.path+" @ "+top.cost);

       for(Edge e:graph[top.v]){
          if(!vis[e.nbr]){
             pq.add(new Pair(e.nbr,top.path+e.nbr,top.cost+e.wt));
          }
       }
     }
   }

   static class Pair implements Comparable<Pair>{
      int v;
      String path;
      int cost;
      Pair(int v,String path,int cost){
         this.v=v;
         this.path=path;
         this.cost=cost;
      }

      public int compareTo(Pair o){
         return this.cost-o.cost;
      }
   }
}