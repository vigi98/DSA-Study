import java.io.*;
import java.util.*;
//IP: Here in this qn we are assuming we are getting a DAG graph input as we are not checking for it. 
public class Main {
   static class Edge {
      int src;
      int nbr;

      Edge(int src, int nbr) {
         this.src = src;
         this.nbr = nbr;
      }
   }

   public static void main(String[] args) throws Exception {
      BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

      int vtces = Integer.parseInt(br.readLine());
      ArrayList<Edge>[] graph = new ArrayList[vtces];
      for (int i = 0; i < vtces; i++) {
         graph[i] = new ArrayList<>();
      }

      int edges = Integer.parseInt(br.readLine());
      for (int i = 0; i < edges; i++) {
         String[] parts = br.readLine().split(" ");
         int v1 = Integer.parseInt(parts[0]);
         int v2 = Integer.parseInt(parts[1]);
         graph[v1].add(new Edge(v1, v2));
      }
      
      boolean[]vis= new boolean[graph.length];
      Stack<Integer>st = new Stack<>();
      for(int i=0;i<graph.length;i++){
         if(vis[i])continue;
         dfs(i,vis,st,graph);
      }
      //display
      while(st.size()!=0)
       System.out.println(st.pop());
   }

   static void dfs(int src,boolean[]vis,Stack<Integer>st,ArrayList<Edge>[]graph){

      vis[src]=true;
      for(Edge e:graph[src]){
         if(!vis[e.nbr])
           dfs(e.nbr,vis,st,graph);
      }

      st.push(src);
   }

}