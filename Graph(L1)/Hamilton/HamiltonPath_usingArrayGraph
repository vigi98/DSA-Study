import java.util.*;
 
 public class Main {
 
     public static boolean hamiltonP(int src,HashSet<Integer>vis,int[][]graph){
         //all nodes have been visited and we are at last node
         if(vis.size()==graph.length-1){
           
           return true;

         }

         vis.add(src);
         for(int e=0;e<graph.length;e++){
             if(graph[src][e]==1 && !vis.contains(e)){
                 return hamiltonP(e,vis,graph);
             }
         }


         return false;
     }
 
     public static void main(String[] args) {
         Scanner sc = new Scanner(System.in);
         int N = sc.nextInt();
         int M = sc.nextInt();
         int[] edges = new int[2 * M];
         for (int i = 0; i < edges.length; i++) {
             edges[i] = sc.nextInt();
         }
         int[][] graph = new int[N][N];
         for (int i = 0; i < M; i++) {
 	     graph[edges[2 * i + 1]-1][edges[2 * i]-1] = 1;
             graph[edges[2 * i]-1][edges[2 * i + 1]-1] = 1;
         }

         System.out.println(hamiltonP(0,new HashSet<>(),graph));
        //  hamiltonianCycle(N, graph);
        // System.out.println(Arrays.toString(edges));
        // System.out.println("Graph");
        // for(int[]e:graph)
        //   System.out.println(Arrays.toString(e));
     }
 }