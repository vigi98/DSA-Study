import java.io.*;
import java.util.*;

public class Main {
   static class Edge {
      int src;
      int nbr;
      int wt;

      Edge(int src, int nbr, int wt) {
         this.src = src;
         this.nbr = nbr;
         this.wt = wt;
      }
   }

   public static void main(String[] args) throws Exception {
      BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

      int vtces = Integer.parseInt(br.readLine());
      ArrayList<Edge>[] graph = new ArrayList[vtces];
      for (int i = 0; i < vtces; i++) {
         graph[i] = new ArrayList<>();
      }

      int edges = Integer.parseInt(br.readLine());
      for (int i = 0; i < edges; i++) {
         String[] parts = br.readLine().split(" ");
         int v1 = Integer.parseInt(parts[0]);
         int v2 = Integer.parseInt(parts[1]);
         int wt = Integer.parseInt(parts[2]);
         graph[v1].add(new Edge(v1, v2, wt));
         graph[v2].add(new Edge(v2, v1, wt));
      }

      bfs(graph);
   }

   static void bfs(ArrayList<Edge>[]graph){

      boolean[]vis= new boolean[graph.length];
      ArrayList<Pair> ans = new ArrayList<Pair>();

      PriorityQueue<Pair>pq= new PriorityQueue<>();
      pq.add(new Pair(0,0,0));
     
      while(pq.size()!=0){
         Pair top=pq.remove();
         if(vis[top.dest]) continue;

         vis[top.dest]=true;
         if(top.dest!=0)
          ans.add(top);
         
         for(Edge e:graph[top.dest]){
            if(!vis[e.nbr])
             pq.add(new Pair(top.dest,e.nbr,e.wt));
         }
      }

      for(Pair p:ans)
       System.out.println("["+p.dest+"-"+p.src+"@"+p.cost+"]");
      
   }

   static class Pair implements Comparable<Pair>{

      int src,dest,cost;
      Pair(int s,int d,int c){
         cost=c;
         src=s;
         dest=d;
      }
      public int compareTo(Pair o){
         return this.cost-o.cost;
      }
   }

}