
//Read the qn frm leetcode: quite Confusing: https://leetcode.com/problems/add-two-numbers/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    
    private ListNode reverse(ListNode h){
        ListNode prev=null,cur=h;
        while(cur!=null){
            ListNode next=cur.next;
            cur.next=prev;
            prev=cur;
            cur=next;
        }
        return prev;
    }
    
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        
        if(l1==null||l2==null){
            return l1==null?l2:l1;
        }
        
        // l1=reverse(l1);
        // l2=reverse(l2);
        
        int carry=0;
        ListNode dummy= new ListNode();
        ListNode t=dummy;
        while(l1!=null && l2!=null){
            
            int sum=l1.val+l2.val+carry;
            carry=sum/10;
            sum=sum%10;
            
            t.next=new ListNode(sum);
            t=t.next;
            
            l1=l1.next;
            l2=l2.next;
        }
        
        while(l1!=null){
            int s=l1.val+carry;
            carry=s/10;
            s%=10;
            
            t.next=new ListNode(s);
            t=t.next;  
            
            l1=l1.next;
        }
        
         while(l2!=null){
            int s=l2.val+carry;
            carry=s/10;
            s%=10;
            
            t.next=new ListNode(s);
            t=t.next;
            
            l2=l2.next;
        }
        
        //if is carry is not 0
        if(carry!=0){
            t.next= new ListNode(carry);
        }
        
        ListNode nh=dummy.next;
        dummy.next=null;
        
        return nh;
    }
}