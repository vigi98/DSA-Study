M-2: Optimized -2-pointer. TC-> O(n*n) SC-> O(M) M: assuming we have 'm' triplets

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);//
        int n=nums.length;
        List<List<Integer>> res= new ArrayList<>();
        
        for(int i=0;i<=n-3;i++){//
            
            if(i==0||nums[i]!=nums[i-1]){
                int lo=i+1,hi=n-1;
                
                 while(lo<hi){
                   int req_sum=0-nums[i];
                     
                     if(nums[lo]+nums[hi]==req_sum){
                         
                        res.add(Arrays.asList(nums[i],nums[lo],nums[hi]));//in increasing order added as nums-array is sorted earlier
                        
                         //incr lo and hi. Both lo and hi will come to last duplicate.
                         while(lo<hi && nums[lo]==nums[lo+1])lo++;
                         while(lo<hi && nums[hi]==nums[hi-1])hi--;
                         
                         //we go to next elem which is not duplicate
                         lo++;hi--;    
                     }
                   
                     else if(nums[lo]+nums[hi]<req_sum) lo++;
                     
                     else hi--;
                   
                 }
            }
            
            // else{ NOT REquired as we are inside for-loop so i will increase
            //     i++;
            // }
           
        }//end of for
        
        return res;
    }
}


M-1// HashMap O(n^2 * mlogm)  SC->O(n)+O(m) ;M: assuming we have 'm' triplets
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        int n=nums.length;
        List<Integer>l;
        List<List<Integer>>ans= new ArrayList<>();
        
        HashMap<Integer,Integer>hm= new HashMap<>();
        HashSet<List<Integer>>hs= new HashSet<>();
        
        for(int e:nums){
            hm.put(e,hm.getOrDefault(e,0)+1);
        }
        System.out.println(hm);
        for(int i=0;i<n;i++){
            int a=nums[i];
            hm.put(a,hm.get(a)-1);
            for(int j=i+1;j<n;j++){
                int b=nums[j];
                hm.put(b,hm.get(b)-1);//Used to prevent current b element from being used & not from duplicacy as we are backtracking the statement after operation i.e (a,b,b)X not allowed should be (a,b,c)though a,b,c can be equal values. 
                
                int c=-(a+b);
                if(hm.containsKey(c)&&hm.get(c)!=0){
                    l=new ArrayList<>();
                    l.add(a);
                    l.add(b);
                    l.add(c);
                    Collections.sort(l);//sorting so that hashset can identify duplicates i.e. (0,-1,1), (-1,1,0),(1,0,-1) --> hashet will treat all as diff elements and not same.Hence we get duplicate answers. So sort req.
                    hs.add(l);
                }
                
                hm.put(b,hm.get(b)+1);//backtrack
                
            }
            // hm.put(a,hm.get(a)+1); a will no longer be used so not backtracking it
        }
        System.out.println(hs);
        for(List<Integer>e:hs)
            ans.add(e);
        
        return ans;
        
    }
}