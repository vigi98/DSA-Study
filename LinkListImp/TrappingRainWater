//DP:
// Time complexity~ O(n)

// Space Complexity~ O(n) 

class Solution {
    
    private int[] LeftGreater(int[]height,int n){
       
        int []lg= new int[n];
        
        lg[0]=height[0];
        
        for(int i=1;i<n;i++)
           lg[i]=Math.max(height[i],lg[i-1]);
        
        return lg;
    }
    
    private int[] RightGreater(int[]height,int n){
       
        int []rg= new int[n];
        
        rg[n-1]=height[n-1];
        
        for(int i=n-2;i>=0;i--)
           rg[i]=Math.max(height[i],rg[i+1]);
        
        return rg;
    }
    
    public int trap(int[] height) {
        int n=height.length;
        int[]ans=new int[n];
        
        int[]lg=LeftGreater(height,n);
        int[]rg=RightGreater(height,n);
        
        for(int i=0;i<n;i++){
            ans[i]=Math.min(lg[i],rg[i])-height[i];
        }
        
        return Arrays.stream(ans).sum();
    }
}