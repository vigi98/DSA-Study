import java.io.*;
import java.util.*;

public class Main {

	static ArrayList<Integer> sol = new ArrayList<>();

	public static void solution(int[] people, int nskills, int cp, ArrayList<Integer> onesol, int skills) {
		
		if(cp==people.length){
			// or Math.pow(2,nskills)-1
			if(skills == ((1<<nskills)-1)){
                if(sol.size()==0 || onesol.size()<sol.size()){
					sol= new ArrayList<>(onesol);
				}
			}
			return;
		}
		//Not included
        solution(people,nskills,cp+1,onesol,skills);
		//Included
		onesol.add(cp);
		solution(people,nskills,cp+1,onesol,skills|people[cp]);
		onesol.remove(onesol.size()-1);
		//store in heap hence has to remove it.Same like backtracking
	}
	public static void main(String[] args) {
		Scanner scn = new Scanner(System.in);
		int n = scn.nextInt();
		HashMap<String, Integer> smap = new HashMap<>();
		for (int i = 0; i < n; i++) {
			smap.put(scn.next(), i);
		}
		
		int np = scn.nextInt();
		int[] people = new int[np];
		for (int i = 0; i < np; i++) {
			int personSkills = scn.nextInt();
			for (int j = 0; j < personSkills; j++) {
				String skill = scn.next();
				int snum = smap.get(skill);
				people[i] = people[i] | (1 << snum);
			}
		}
        // instead of sending total skills (i.e n) we can send dirctly 
		solution(people, n, 0, new ArrayList<>(), 0);
		//people array to get total skill value, n-total skills(1 indexed), current person, list of people choosen till now, current skills value(Use Or in this) 
		System.out.println(sol);
		
	}
}