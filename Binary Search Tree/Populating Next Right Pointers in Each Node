/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/
1] BFS
class Solution {
    public Node connect(Node root) {
        if(root==null)return root;
        
        Queue<Node>q= new ArrayDeque<>();
        q.add(root);
        
        while(q.size()!=0){
            int s=q.size();
            Node prev=null;
            
            while(s--!=0){ 
                Node cur= q.remove();
                
                if(prev!=null)
                    prev.next=cur;
                prev=cur;
                
                if(cur.left!=null)q.add(cur.left);
                if(cur.right!=null)q.add(cur.right);
            }
        }
        
        return root;
    }
}

2] DFS[Not a good soln]//Repeatition Happening


    public Node connect(Node root) {
        if(root==null)return root;
        
        helper(root.left,root.right);
        return root;
    }
    
    private void helper(Node l,Node r){
        if(l==null)return;
        
        l.next=r;
        
        helper(l.left,l.right);
        helper(r.left,r.right);
        helper(l.right,r.left);
    }