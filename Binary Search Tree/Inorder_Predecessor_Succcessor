/* BST Node
class Node
{
	int key;
	Node left, right;
	
	Node(int item)
	{
	    data = item;
	    left = right = null;
	}
}
*/

// This function finds predecessor and successor of key in BST.
// It sets pre and suc as predecessor and successor respectively

//1] Recursive Way TC->O(h), SC-> O(h); h-> logN
class GfG
{
    public static void findPreSuc(Node root, Res p, Res s, int key)
    {
       if(root==null)return;
       
       fPred(root,key,p);
       fSucc(root,key,s);
    }
    
     private static void fSucc(Node r,int l,Res s){
        
        if(r==null)return;
        
        if(r.data>l){
            s.succ=r;
            fSucc(r.left,l,s);
            return;
        }
        
        else
         fSucc(r.right,l,s);
    }
    
    
    private static void fPred(Node r,int h,Res p){
        if(r==null)return;
        
        if(r.data<h){
            p.pre=r;
            fPred(r.right,h,p);
            return;
        }
        
        else
         fPred(r.left,h,p);
    }
}


//2] Better :- Non recursive(O(N))- SC-> O(1)

class GfG
{
    public static void findPreSuc(Node root, Res p, Res s, int key)
    {
       if(root==null)return;
       
       fPred(root,key,p);
       fSucc(root,key,s);
    }
    
     private static void fSucc(Node r,int l,Res s){
        
        while(r!=null){
            if(r.data<=l)r=r.right;
            
            else{
                s.succ=r;
                r=r.left;
            }
        }
    }
    
    
    private static void fPred(Node r,int h,Res p){
      
       while(r!=null){
           if(r.data>=h)r=r.left;
           
           else{
               p.pre=r;
               r=r.right;
           }
       }
    }
}