/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {// TC-> O(N*logN) SC->(O(N))

//Max height of a tree->logN 
    
    private class Pair{
        TreeNode node;
        int vl;
        Pair(TreeNode n,int v){
            node=n;
            vl=v;
        }
    }
    
    private void width(TreeNode r,int vl,int[]minMax){
        if(r==null)return;
        
        minMax[0]=Math.min(minMax[0],vl);
        minMax[1]=Math.max(minMax[1],vl);
        
        width(r.left,vl-1,minMax);
        width(r.right,vl+1,minMax);
    }
    
    public List<List<Integer>> verticalTraversal(TreeNode root) {
        
        List<List<Integer>>ans= new ArrayList<>();
        
        if(root==null)return ans;
        
        PriorityQueue<Pair>pq=new PriorityQueue<>((a,b)->{
            return a.node.val-b.node.val;
        });
        
        PriorityQueue<Pair>cq=new PriorityQueue<>((a,b)->{
            return a.node.val-b.node.val;
        });
        
        int[]minMax= new int[2];
        
        width(root,0,minMax);//IP
        int len=minMax[1]-minMax[0]+1;
        
        for(int i=0;i<len;i++)
            ans.add(new ArrayList<>());//IP
        
        pq.add(new Pair(root,Math.abs(minMax[0])));//IP//minMax[0]: gives a minimum width
        
        while(pq.size()!=0){
            int s=pq.size();
            
            while(s-->0){    
                Pair top=pq.remove();
                TreeNode node=top.node;
                int vl=top.vl;
                
                ans.get(vl).add(node.val);
                
                if(node.left!=null)
                   cq.add(new Pair(node.left,vl-1));
                if(node.right!=null)
                    cq.add(new Pair(node.right,vl+1));  
            
            }
            PriorityQueue<Pair>temp=pq;
            pq=cq;
            cq=temp;
        }
                
        return ans;
    }
}