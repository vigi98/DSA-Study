/*
class Node{
    int data;
    Node left;
    Node right;
    Node(int data){
        this.data = data;
        left=null;
        right=null;
    }
}
*/

class Solution
{
    
    private static class Pair{
        int vl;
        Node node;
        Pair(Node n,int v){
            vl=v;
            node=n;
        }
    }
    
    private static void width(Node r,int vl,int []minMax){
        if(r==null)return;
        
        minMax[0]=Math.min(minMax[0],vl);
        minMax[1]=Math.max(minMax[1],vl);
        
        width(r.left,vl-1,minMax);
        width(r.right,vl+1,minMax);
    }
    //Function to return a list of nodes visible from the top view 
    //from left to right in Binary Tree.
    static ArrayList<Integer> topView(Node root)
    {
        ArrayList<Integer>res= new ArrayList<>();
       
        if(root==null)return res;
        
        int []minMax= new int[2];
        width(root,0,minMax);
        
        int len=minMax[1]-minMax[0]+1;
        
        for(int i=0;i<len;i++)//IP
         res.add(0);
        
        Queue<Pair>q= new ArrayDeque<>();
        q.add(new Pair(root,Math.abs(minMax[0])));
        
        while(q.size()!=0){
        
          Pair top= q.remove();
          Node node=top.node;
          int vl=top.vl;
          
          if(res.get(vl)==0)//only first element
            res.set(vl,node.data);
          
          if(node.left!=null)q.add(new Pair(node.left,vl-1));
          if(node.right!=null)q.add(new Pair(node.right,vl+1));
          
        }
        return res;
        
    }
}