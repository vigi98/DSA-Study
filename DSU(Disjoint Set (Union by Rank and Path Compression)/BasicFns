class UnionFind {
    public int[] parent;
    public int[] rank;

    public UnionFind(int size) {
        parent = new int[size];
        rank = new int[size];
        for (int i = 0; i < size; ++i) {
            parent[i] = i;
        }
    }
      private int findP(int node){
        if(parent[node]==node)
            return node;
        return parent[node]=findP(parent[node]);//PathCompression
    }

    public boolean union(int node1, int node2) {
        int parent1 = findP(node1);
        int parent2 = findP(node2);
        
        // node1 and node2 already belong to same parent.
        if (parent1 == parent2) {
            return false;
        }

        if (rank[parent1] > rank[parent2]) {
            parent[parent2] = parent1;
        } else if (rank[parent1] < rank[parent2]) {
            parent[parent1] = parent2;
        } else {
            parent[parent1] = parent2;
            rank[parent2] += 1;
        }

        return true;
    }
}